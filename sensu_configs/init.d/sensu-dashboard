#!/bin/bash

# chkconfig: 345 90 90
# description: Sensu monitoring framework dashboard

### BEGIN INIT INFO
# Provides:       sensu-dashboard
# Required-Start: $remote_fs $network
# Required-Stop:  $remote_fs $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Description:    Sensu monitoring framework dashboard
### END INIT INFO

system=unknown
if [ -f /etc/redhat-release ]; then
    system=redhat
elif [ -f /etc/debian_version ]; then
    system=debian
elif [ -f /etc/SuSE-release ]; then
    system=suse
elif [ -f /etc/gentoo-release ]; then
    system=gentoo
elif [ -f /etc/arch-release ]; then
     system=arch
elif [ -f /etc/slackware-version ]; then
    system=slackware
elif [ -f /etc/lfs-release ]; then
    system=lfs
fi

prog="sensu-dashboard"

user=${SENSU_USER-sensu}
sensu_home=${SENSU_HOME-/opt/sensu}
config=${CONFIG-/etc/sensu/config.json}
exec=${EXEC-/opt/sensu/bin/sensu-dashboard}
logfile=${LOGFILE-/var/log/sensu/$prog.log}
pidfile=${PIDFILE-/var/run/sensu/$prog.pid}
options=${OPTIONS}
ORIG_PATH=$PATH

cd $sensu_home

## 
## Set platform specific bits here.
## The original platform for this script was redhat so the scripts are partial
## to redhat style. Eventually we may want to be more LSB compliant
## such as what Debian platforms already implement instead.
##
## Each platform must implement at least the following functions:
##
##     start_daemon $user $pidfile $executable "arguments"
##     killproc -p $pid $prog
##     log_daemon_msg $@
##     log_action_msg $@
##     log_success_msg $@
##     log_failure_msg $@
##     echo_ok
##     echo_fail
##
if [ "$system" = "redhat" ]; then
    ## source platform specific external scripts
    . /etc/init.d/functions
    [ -r /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

    ## set or override platform specific variables
    lockfile=${LOCKFILE-/var/lock/subsys/$prog}

    ## set or override platform specific functions
    start_daemon() {
        daemon --user $1 --pidfile $2 "$3 $4"
    }
    log_daemon_msg() {
        echo -n $"$1"
    }
    echo_ok() {
        echo_success; echo
    }
    echo_fail() {
        echo_failure; echo
    }
    log_success_msg() {
        success $"$@"
    }
    log_failure_msg() {
        failure $"$@"
        echo $"$@"
    }
    log_action_msg() {
        echo $@
    }
fi

if [ "$system" = "debian" ]; then
    ## source platform specific external scripts
    . /lib/lsb/init-functions
    [ -r /etc/default/$prog ] && . /etc/default/$prog

    ## set or override platform specific variables
    lockfile=${LOCKFILE-/var/lock/$prog}

    ## set or override platform specific functions
    start_daemon() {
        start-stop-daemon --start --chuid $1 --pidfile $2 --exec $3 -- $4
    }
    echo_ok() {
        log_end_msg 0 
    }
    echo_fail() {
        log_end_msg 1
    }
fi
# TODO: support other platforms in the future: suse, gentoo, arch, slackware, etc
export PATH=$PATH:/opt/sensu/embedded/bin:$ORIG_PATH:/etc/sensu/plugins:/usr/local/sbin:/usr/local/bin

ensure_pid_dir () {
    pid_dir=`dirname ${pidfile}`
    if [ ! -d ${pid_dir} ] ; then
        mkdir -p ${pid_dir}
        chown -R ${user} ${pid_dir}
        chmod 755 ${pid_dir}
    fi
}

start() {
    log_daemon_msg "Starting $prog"

    [ -x $exec ] || exit 5

    status &> /dev/null

    if [ $? -eq 0 ]; then
        log_action_msg "$prog is already running."
        echo_ok
        exit 0
    fi

    ensure_pid_dir
    start_daemon $user $pidfile $exec "-b -c $config -p $pidfile -l $logfile $options"
    RETVAL=$?
    sleep 1

    # make sure it's still running. some errors occur only after startup
    status &> /dev/null
    if [ $? -ne 0 ]; then
        echo_fail
        exit 1
    fi

    if [ $RETVAL -eq 0 ]; then
        touch $lockfile
    fi
    echo_ok
    
    return $RETVAL
}

stop() {
    log_daemon_msg "Stopping $prog"

    if [ -f $pidfile ]; then
        killproc -p $pidfile $prog
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
            rm -f $pidfile
            rm -f $lockfile
            echo_ok
        else
            echo_fail
        fi
        return $RETVAL
    else
        pid=$(pgrep -fl $exec | grep -v grep | grep -v bash | cut -f1 -d" ")
        if [ ! "$pid" == "" ]; then
            kill $pid
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                rm -f $pidfile
                rm -f $lockfile
                echo_ok
            fi
        else
            echo_fail
        fi
    fi
}

status() {
    local pid

    # First try "ps"
    pid=$(pgrep -fl $exec | grep -v grep | grep -v bash | cut -f1 -d" ")
    if [ -n "$pid" ]; then
        log_action_msg $"${prog} (pid $pid) is running..."
        return 0
    fi

    # Next try "/var/run/*.pid" files
    if [ -f "$pidfile" ] ; then
        read pid < "$pidfile"
        if [ -n "$pid" ]; then
            log_action_msg $"${prog} dead but pid file exists"
            return 1
        fi
    fi

    # See if $lockfile
    if [ -f "$lockfile" ]; then
        log_action_msg $"${prog} dead but subsys locked"
        return 2
    fi

    log_action_msg $"${prog} is stopped"
    return 3
}

# sometimes sensu components need a moment to shutdown, so
# let's implement a waiting approach to restarts with a timeout
restart() {
    max_wait=10
    count=0; success=0

    stop

    while [ $count -lt $max_wait ]; do
        count=$((count + 1))
        status &> /dev/null
        if [ $? -eq 0 ]; then
            # still running
            sleep 1
        else
            success=1
            break
        fi
    done

    if [ $success = 1 ]; then
        start
    else
        log_failure_msg "Timed out waiting for $prog to stop"
        return 1
    fi
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        ;;
  restart)
        restart
        ;;
  *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 2
esac

exit $?
